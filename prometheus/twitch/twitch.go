package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	log "github.com/Sirupsen/logrus"
)

// Response from
// curl -s -H 'Accept: application/vnd.twitchtv.v5+json' \
//     -H "Client-ID: ${CLIENT_ID}" \
//     -X GET "https://api.twitch.tv/kraken/streams/${USER_ID}"

type KrakenStreamsResponse struct {
	Stream struct {
		ID                int64     `json:"_id"`
		Game              string    `json:"game"`
		BroadcastPlatform string    `json:"broadcast_platform"`
		CommunityID       string    `json:"community_id"`
		CommunityIds      []string  `json:"community_ids"`
		Viewers           int       `json:"viewers"`
		VideoHeight       int       `json:"video_height"`
		AverageFps        float32   `json:"average_fps"`
		Delay             int       `json:"delay"`
		CreatedAt         time.Time `json:"created_at"`
		IsPlaylist        bool      `json:"is_playlist"`
		StreamType        string    `json:"stream_type"`
		Preview           struct {
			Small    string `json:"small"`
			Medium   string `json:"medium"`
			Large    string `json:"large"`
			Template string `json:"template"`
		} `json:"preview"`
		Channel struct {
			Mature                       bool      `json:"mature"`
			Status                       string    `json:"status"`
			BroadcasterLanguage          string    `json:"broadcaster_language"`
			DisplayName                  string    `json:"display_name"`
			Game                         string    `json:"game"`
			Language                     string    `json:"language"`
			ID                           int       `json:"_id"`
			Name                         string    `json:"name"`
			CreatedAt                    time.Time `json:"created_at"`
			UpdatedAt                    time.Time `json:"updated_at"`
			Partner                      bool      `json:"partner"`
			Logo                         string    `json:"logo"`
			VideoBanner                  string    `json:"video_banner"`
			ProfileBanner                string    `json:"profile_banner"`
			ProfileBannerBackgroundColor string    `json:"profile_banner_background_color"`
			URL                          string    `json:"url"`
			Views                        int       `json:"views"`
			Followers                    int       `json:"followers"`
			BroadcasterType              string    `json:"broadcaster_type"`
			Description                  string    `json:"description"`
			PrivateVideo                 bool      `json:"private_video"`
			PrivacyOptionsEnabled        bool      `json:"privacy_options_enabled"`
		} `json:"channel"`
	} `json:"stream"`
}

var krakenClientId = "REDACTED"

func KrakenStreamsRequest(userId string) (KrakenStreamsResponse, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	req, err := http.NewRequest("GET", "https://api.twitch.tv/kraken/streams/"+userId, nil)
	if err != nil {
		log.Errorf("ERR: %s", err)
		return KrakenStreamsResponse{}, err
		// handle err
	}
	req.Header.Set("Accept", "application/vnd.twitchtv.v5+json")
	req.Header.Set("Client-Id", krakenClientId)

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Errorf("ERR: %s", err)
		return KrakenStreamsResponse{}, err
		// handle err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Errorf("ERR: %s", err)
		return KrakenStreamsResponse{}, fmt.Errorf("Error reading response: %s", err)
	}

	response := KrakenStreamsResponse{}

	err = json.Unmarshal(body, &response)
	if err != nil {
		log.Errorf("ERR: %s", err)
		return KrakenStreamsResponse{}, fmt.Errorf("Error unmarshalling response: %s", err)
	}

	if resp.StatusCode != 200 {
		log.Errorf("ERR: %s", err)
		return KrakenStreamsResponse{}, fmt.Errorf("Failed request: %s", body)
	}

	return response, nil

}
